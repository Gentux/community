{
	"id": "b01cca43-bf38-08e7-2042-339c72ba27ba",
	"name": "Nanocloud Tests",
	"description": "",
	"order": [],
	"folders": [
		{
			"id": "c3e8350b-369a-3596-8247-8da92fa79c56",
			"name": "[005]INIT",
			"description": "",
			"order": [
				"b7572cd7-54ce-680c-d47c-0c51880cdaf4"
			],
			"owner": 0
		},
		{
			"id": "01470fe9-a6e1-90aa-cfbe-cdd53ca88735",
			"name": "[010]USERS",
			"description": "Test Requests for users module",
			"order": [
				"7acc81de-bd95-d229-6961-d04d54e1d7fc",
				"f71d13dd-2eed-57b6-29ea-79e4bde9d1a6",
				"81892aa6-095b-160c-188d-63dd5b57cda9",
				"387dfb3a-be76-a568-ee48-f7a31b989a9e",
				"bce0f9a7-e94f-b29c-db33-cfd673d8f8cb",
				"7a259674-b10e-56ff-d1de-b3bc221b83da",
				"04c7bdcd-0634-04f4-e35a-42db376fafb2",
				"fcfb6351-c6cc-b491-d2ff-12082f13b9ed",
				"029799d5-a441-b2a5-4211-ba732d9b7f81",
				"960ead55-336a-7737-31c7-33e54f4ad345",
				"fe045879-d3db-bcda-418b-e87cb9b9f1d8",
				"0262d6f0-d968-80ff-5a94-0cac8137d0be",
				"880b97bc-e903-c96d-eeec-059be91e320a",
				"05cc5703-02e7-6f96-f4e0-888eb2c7a6aa",
				"4e56d242-19e9-0ebf-b19c-65e4ff394553",
				"e2c96a02-e26e-2ad2-3eeb-eb949483c579"
			],
			"owner": 0,
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba"
		},
		{
			"id": "0b421e4b-c3bc-1cb9-1752-cdf51e192635",
			"name": "[030]HISTORY",
			"description": "",
			"order": [
				"52a83cb4-bb47-7f3a-6e6d-1b08263ab393",
				"a3e149b4-6469-af64-33ce-3860f91caa58",
				"ca8fe539-d765-0a76-c923-bf8bb23dd8e8",
				"b3e58125-aa2d-b674-9b0d-9163de001196"
			],
			"owner": 0,
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5"
		},
		{
			"id": "42a97f8a-7ba2-91e9-b2ef-bc0895783146",
			"name": "[040]APPS",
			"description": "Test request for apps module",
			"order": [
				"34c4c3fe-4276-5c9b-cd47-37fc62bcd901",
				"a19c7ad5-1ac9-dd60-0f6c-4ae69fe0153f",
				"1f46d964-6992-3bbd-bbd8-373f7056d290",
				"79bcacb4-f20c-6179-d75e-0202a41c86fe",
				"27f2a4c7-ae84-5ed6-025b-10cc5dee267e",
				"564af1ec-7325-8e6f-c7c8-498991020f17",
				"2db8742c-f117-f373-1554-7c44fd7fb18f",
				"f7804920-d56e-7494-98b4-0c9c5774f81e",
				"1f8d69b9-00fe-18a3-6b87-e4c9192527a0",
				"75a18322-e82f-8b13-226f-7a59f4ee4251",
				"41e1708e-34bf-6309-db2e-976cd17d15c7",
				"d51e7488-42a8-3d0d-331e-d082daba8544",
				"8a58c042-6007-feaf-66d4-f8576142daae",
				"98d950c4-04a9-673f-845f-e59eb0b35ade"
			],
			"owner": 0,
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5"
		},
		{
			"id": "d065dfc2-deac-790d-b7a6-d76fb56a8203",
			"name": "[045] USER RIGHTS",
			"description": "",
			"order": [
				"de94cb56-85c6-dfd2-6ea5-8342ab369619",
				"72649593-d9d9-c332-2d01-1aef2aaf8a36",
				"fc4d5bfe-d7bf-c1ca-21bd-ab54f0fb4e98",
				"2ff8e4a0-ed29-0ae8-4f53-7f7cc851ff17",
				"5fd1f7ac-6576-c66e-ea60-c8a09204f817",
				"4ace0873-5403-9f38-1463-3ac173577590",
				"b3985575-5baa-8dc0-adbc-7e9520360fa2",
				"054c1582-28f1-d514-cc44-17d7348f4ad3",
				"a70f63e0-29d1-8ae3-ffdd-76c776afe2ad",
				"789f64f9-7d64-3d8d-8315-2ac2e9d594e5",
				"ee572235-a0bc-f703-131e-9a0623db9a10"
			],
			"owner": 0,
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba"
		},
		{
			"id": "c6c91e8c-8a06-fafb-7705-72604b95ceaf",
			"name": "[050]IAAS",
			"description": "",
			"order": [
				"a5a6f5bd-52c8-13ef-4d7d-07ff6ae8337e",
				"35a31237-2f9a-0133-af07-828dd6bda585",
				"8c2f288a-6aa6-027b-be95-37873739ebc9"
			],
			"owner": 0,
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5"
		}
	],
	"timestamp": 0,
	"owner": 0,
	"remoteLink": "",
	"public": false,
	"requests": [
		{
			"id": "0262d6f0-d968-80ff-5a94-0cac8137d0be",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/invalidUUID",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar res = JSON.parse(responseBody);\ntests[\"error field is present\"] = (typeof res.error[0].detail) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455555012894,
			"name": "Delete non-existing user",
			"description": "Deletes the specified user from the database.",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": []
		},
		{
			"id": "029799d5-a441-b2a5-4211-ba732d9b7f81",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n \nvar res = JSON.parse(responseBody);\ntests[\"id is present\"] = (typeof res.data.id) === \"string\";\ntests[\"email is present\"] = (typeof res.data.attributes.email) === \"string\";\ntests[\"email has the right value\"] = res.data.attributes.email === postman.getEnvironmentVariable(\"TEST_USER_EMAIL\");\ntests[\"activated is present\"] = (typeof res.data.attributes.activated) === \"boolean\";\ntests[\"activated has the right value\"] = res.data.attributes.activated === false;\ntests[\"is_admin is present\"] = (typeof res.data.attributes.is_admin) === \"boolean\";\ntests[\"is_admin has the right value\"] = res.data.attributes.is_admin === false;\ntests[\"first_name is present\"] = (typeof res.data.attributes.first_name) === \"string\";\ntests[\"first_name has the right value\"] = res.data.attributes.first_name === postman.getEnvironmentVariable(\"TEST_USER_FIRSTNAME\");\ntests[\"last_name is present\"] = (typeof res.data.attributes.last_name) === \"string\";\ntests[\"last_name has the right value\"] = res.data.attributes.last_name === postman.getEnvironmentVariable(\"TEST_USER_LASTNAME\");\ntests[\"sam is present\"] = (typeof res.data.attributes.sam) === \"string\";\ntests[\"windows_password is present\"] = (typeof res.data.attributes.windows_password) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455902306966,
			"name": "Get User Infos to verify if he is disabled",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": []
		},
		{
			"id": "04c7bdcd-0634-04f4-e35a-42db376fafb2",
			"headers": "Authorization: Bearer {{ACCESS_TOKEN}}\nContent-Type: application/json\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/INVALID_ID",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar res = JSON.parse(responseBody);\ntests[\"Error field is present\"] = (typeof res.error[0].detail) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455555938297,
			"name": "Change Password of unknown user",
			"description": "Changes the password of the specified user.",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\n        \"Password\": \"{{TEST_USER_NEWPASSWORD}}\"\n    }\n}"
		},
		{
			"id": "054c1582-28f1-d514-cc44-17d7348f4ad3",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{TEST_USER_ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\nvar res = JSON.parse(responseBody);\ntests[\"Error is present\"] = (typeof res.error[0].detail) === \"string\";\ntests[\"error is of type forbidden\"] = res.error[0].detail === \"forbidden\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455703278796,
			"name": "Publish valid app copy",
			"description": "Get OAuth token for admin user",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\n        \"path\": \"C:/Windows/System32/calc.exe\"\n    }\n}"
		},
		{
			"id": "05cc5703-02e7-6f96-f4e0-888eb2c7a6aa",
			"headers": "Content-Type: application/json\nAuthorization: Basic {{_OAUTH_CLIENT_HTTP_BASIC}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/oauth/token",
			"preRequestScript": "var env = {\n    PROTOCOL: \"http\",\n    HOST: \"127.0.0.1\",\n    ADMIN_USERNAME: \"admin@nanocloud.com\",\n    ADMIN_PASSWORD: \"admin\",\n    APP_KEY: \"9405fb6b0e59d2997e3c777a22d8f0e617a9f5b36b6565c7579e5be6deb8f7ae\",\n    APP_SECRET: \"9050d67c2be0943f2c63507052ddedb3ae34a30e39bbbbdab241c93f8b5cf341\"\n};\n\nfor (var key in env) {\n    var value = postman.getEnvironmentVariable(key);\n    if (typeof value === \"undefined\") {\n        postman.setEnvironmentVariable(key, env[key]);\n    }\n}\n\nvar appKey = postman.getEnvironmentVariable(\"APP_KEY\");\nvar appSecret = postman.getEnvironmentVariable(\"APP_SECRET\");\n\n/*\n * Use this technique instead of Basic auth to prevent basic base64 key\n * to be saved.\n */\npostman.setEnvironmentVariable(\"_OAUTH_CLIENT_HTTP_BASIC\", btoa(appKey + \":\" + appSecret))",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 401\"] = responseCode.code === 401;\n \nvar res = JSON.parse(responseBody);\ntests[\"error field is present\"] = typeof(res.error) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455618826950,
			"name": "Login with unknown user",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"rawModeData": "{\n    \"username\": \"invalid@mail.com\",\n    \"password\": \"{{TEST_USER_PASSWORD}}\",\n    \"grant_type\": \"password\"\n}"
		},
		{
			"id": "1f46d964-6992-3bbd-bbd8-373f7056d290",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.data.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.data.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455894631964,
			"name": "Publish valid app",
			"description": "Get OAuth token for admin user",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\n        \"type\": \"application\",\n        \"attributes\": {\n            \"path\": \"C:/Windows/System32/calc.exe\"\n        }\n    }\n}"
		},
		{
			"id": "1f8d69b9-00fe-18a3-6b87-e4c9192527a0",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps/connections",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"calc Connection hostname is present\"] = (typeof res.data[2].attributes.hostname) === \"string\";\ntests[\"calc Connection hostname has the correct value\"] = res.data[2].attributes.hostname === \"iaas-module\";\ntests[\"calc Connection port is present\"] = (typeof res.data[2].attributes.port) === \"string\";\ntests[\"calc Connection port is 'collection'\"] = res.data[2].attributes.port === \"3389\";\ntests[\"calc Connection username is present\"] = (typeof res.data[2].attributes.username) === \"string\";\ntests[\"calc Connection password is present\"] = (typeof res.data[2].attributes.password) === \"string\";\ntests[\"calc Connection remote_app is present\"] = (typeof res.data[2].attributes.remote_app) === \"string\";\ntests[\"calc Connection remote_app has the correct value\"] = res.data[2].attributes.remote_app === \"||calc\";\ntests[\"calc Connection protocol is present\"] = (typeof res.data[2].attributes.protocol) === \"string\";\ntests[\"calc Connection protocol has the correct value\"] = res.data[2].attributes.protocol === \"rdp\";\n\ntests[\"Desktop Connection hostname is present\"] = (typeof res.data[0].attributes.hostname) === \"string\";\ntests[\"Desktop Connection hostname has the correct value\"] = res.data[0].attributes.hostname === \"iaas-module\";\ntests[\"Desktop Connection port is present\"] = (typeof res.data[0].attributes.port) === \"string\";\ntests[\"Desktop Connection port is 'collection'\"] = res.data[0].attributes.port === \"3389\";\ntests[\"Desktop Connection username is present\"] = (typeof res.data[0].attributes.username) === \"string\";\ntests[\"Desktop Connection username is Admin\"] = res.data[0].attributes.username === \"Administrator\";\ntests[\"Desktop Connection password is present\"] = (typeof res.data[0].attributes.password) === \"string\";\ntests[\"Desktop Connection password is correct\"] =  res.data[0].attributes.password === \"Nanocloud123+\";\ntests[\"Desktop Connection remote_app is present\"] = (typeof res.data[0].attributes.remote_app) === \"string\";\ntests[\"Desktop Connection remote_app has the correct value\"] = res.data[0].attributes.remote_app === \"\";\ntests[\"Desktop Connection protocol is present\"] = (typeof res.data[0].attributes.protocol) === \"string\";\ntests[\"Desktop Connection protocol has the correct value\"] = res.data[0].attributes.protocol === \"rdp\";\n\ntests[\"hapticPowershell Connection hostname is present\"] = (typeof res.data[1].attributes.hostname) === \"string\";\ntests[\"hapticPowershell Connection hostname has the correct value\"] = res.data[1].attributes.hostname === \"iaas-module\";\ntests[\"hapticPowershell Connection port is present\"] = (typeof res.data[1].attributes.port) === \"string\";\ntests[\"hapticPowershell Connection port is 'collection'\"] = res.data[1].attributes.port === \"3389\";\ntests[\"hapticPowershell Connection username is present\"] = (typeof res.data[1].attributes.username) === \"string\";\ntests[\"hapticPowershell Connection username is Admin\"] = res.data[1].attributes.username === \"Administrator\";\ntests[\"hapticPowershell Connection password is present\"] = (typeof res.data[1].attributes.password) === \"string\";\ntests[\"hapticPowershell Connection password is correct\"] =  res.data[1].attributes.password === \"Nanocloud123+\";\ntests[\"hapticPowershell Connection remote_app is present\"] = (typeof res.data[1].attributes.remote_app) === \"string\";\ntests[\"hapticPowershell Connection remote_app has the correct value\"] = res.data[1].attributes.remote_app === \"||hapticPowershell\";\ntests[\"hapticPowershell Connection protocol is present\"] = (typeof res.data[1].attributes.protocol) === \"string\";\ntests[\"hapticPowershell Connection protocol has the correct value\"] = res.data[1].attributes.protocol === \"rdp\";\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455894207147,
			"name": "Lists all connections",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": []
		},
		{
			"id": "27f2a4c7-ae84-5ed6-025b-10cc5dee267e",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar res = JSON.parse(responseBody);\ntests[\"Error field is present\"] = (typeof res.error[0].detail) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455887407314,
			"name": "Publish app with empty name",
			"description": "Get OAuth token for admin user",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\n        \"type\": \"application\",\n        \"attributes\": {\n            \"path\": \"    \"\n        }\n    }\n}"
		},
		{
			"id": "2db8742c-f117-f373-1554-7c44fd7fb18f",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"hapticPowershell id is present\"] = (typeof res.data[0].id) === \"number\";\ntests[\"hapticPowershell collection name is present\"] = (typeof res.data[0].attributes.collection_name) === \"string\";\ntests[\"hapticPowershell collection name is 'collection'\"] = res.data[1].attributes.collection_name === \"collection\";\ntests[\"hapticPowershell alias is present\"] = (typeof res.data[0].attributes.alias) === \"string\";\ntests[\"hapticPowershell alias is 'hapticPowershell'\"] = res.data[1].attributes.alias === \"hapticPowershell\";\ntests[\"hapticPowershell display Name is present\"] = (typeof res.data[0].attributes.display_name) === \"string\";\ntests[\"hapticPowershell display Name is 'hapticPowershell'\"] = res.data[1].attributes.display_name === \"hapticPowershell\";\ntests[\"hapticPowershell filepath is present\"] = (typeof res.data[0].attributes.file_path) === \"string\";\ntests[\"hapticPowershell filepath has the correct value\"] = res.data[1].attributes.file_path === \"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\";\n\ntests[\"Dekstop id is present\"] = (typeof res.data[1].id) === \"number\";\ntests[\"Dekstop collection name is present\"] = (typeof res.data[1].attributes.collection_name) === \"string\";\ntests[\"Dekstop collection name is 'collection'\"] = res.data[0].attributes.collection_name === \"\";\ntests[\"Dekstop alias is present\"] = (typeof res.data[1].attributes.alias) === \"string\";\ntests[\"Dekstop alias is 'Dekstop'\"] = res.data[0].attributes.alias === \"Desktop\";\ntests[\"Dekstop display Name is present\"] = (typeof res.data[1].attributes.display_name) === \"string\";\ntests[\"Dekstop display Name is 'Dekstop'\"] = res.data[0].attributes.display_name === \"Desktop\";\ntests[\"Dekstop filepath is present\"] = (typeof res.data[1].attributes.file_path) === \"string\";\ntests[\"Dekstop filepath has the correct value\"] = res.data[0].attributes.file_path === \"\";\n\ntests[\"calc id is present\"] = (typeof res.data[2].id) === \"number\";\ntests[\"calc collection name is present\"] = (typeof res.data[2].attributes.collection_name) === \"string\";\ntests[\"calc collection name is 'collection'\"] = res.data[2].attributes.collection_name === \"collection\";\ntests[\"calc alias is present\"] = (typeof res.data[2].attributes.alias) === \"string\";\ntests[\"calc alias is 'calc'\"] = res.data[2].attributes.alias === \"calc\";\ntests[\"calc display Name is present\"] = (typeof res.data[2].attributes.display_name) === \"string\";\ntests[\"calc display Name is 'calc'\"] = res.data[2].attributes.display_name === \"calc\";\ntests[\"calc filepath is present\"] = (typeof res.data[2].attributes.file_path) === \"string\";\ntests[\"calc filepath has the correct value\"] = res.data[2].attributes.file_path === \"C:\\\\Windows\\\\System32\\\\calc.exe\";\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455887047359,
			"name": "Lists all apps",
			"description": "Get OAuth token for admin user",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": []
		},
		{
			"id": "2ff8e4a0-ed29-0ae8-4f53-7f7cc851ff17",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{TEST_USER_ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\nvar res = JSON.parse(responseBody);\ntests[\"Error is present\"] = (typeof res.error[0].detail) === \"string\";\ntests[\"error is of type forbidden\"] = res.error[0].detail === \"forbidden\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455703790353,
			"name": "Change Password copy",
			"description": "Changes the password of the specified user.",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\n     \"password\": \"{{TEST_USER_NEWPASSWORD}}\"\n    }\n}"
		},
		{
			"id": "34c4c3fe-4276-5c9b-cd47-37fc62bcd901",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452866359408,
			"name": "List empty apps list",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"folder": "42a97f8a-7ba2-91e9-b2ef-bc0895783146"
		},
		{
			"id": "35a31237-2f9a-0133-af07-828dd6bda585",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/iaas/windows-custom-server-127.0.0.1-windows-server-std-2012R2-amd64/stop",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1453471589781,
			"name": "Stop windows",
			"description": "Get OAuth token for admin user",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"folder": "c6c91e8c-8a06-fafb-7705-72604b95ceaf"
		},
		{
			"id": "387dfb3a-be76-a568-ee48-f7a31b989a9e",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n \nvar res = JSON.parse(responseBody);\ntests[\"id is present\"] = (typeof res.data.id) === \"string\";\ntests[\"email is present\"] = (typeof res.data.attributes.email) === \"string\";\ntests[\"email has the right value\"] = res.data.attributes.email === postman.getEnvironmentVariable(\"TEST_USER_EMAIL\");\ntests[\"activated is present\"] = (typeof res.data.attributes.activated) === \"boolean\";\ntests[\"activated has the right value\"] = res.data.attributes.activated === true;\ntests[\"is_admin is present\"] = (typeof res.data.attributes.is_admin) === \"boolean\";\ntests[\"is_admin has the right value\"] = res.data.attributes.is_admin === false;\ntests[\"first_name is present\"] = (typeof res.data.attributes.first_name) === \"string\";\ntests[\"first_name has the right value\"] = res.data.attributes.first_name === postman.getEnvironmentVariable(\"TEST_USER_FIRSTNAME\");\ntests[\"last_name is present\"] = (typeof res.data.attributes.last_name) === \"string\";\ntests[\"last_name has the right value\"] = res.data.attributes.last_name === postman.getEnvironmentVariable(\"TEST_USER_LASTNAME\");\ntests[\"sam is present\"] = (typeof res.data.attributes.sam) === \"string\";\ntests[\"windows_password is present\"] = (typeof res.data.attributes.windows_password) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455812914452,
			"name": "Get User Infos",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": []
		},
		{
			"id": "41e1708e-34bf-6309-db2e-976cd17d15c7",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps/calcdsd",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar res = JSON.parse(responseBody);\ntests[\"error field is present\"] = (typeof res.error[0].detail) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455888293304,
			"name": "Change unknown app name",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{\n    \"data\" : {\n        \"type\": \"application\",\n        \"attributes\": {\n            \"display_name\": \"newcalc\"\n        }\n    }\n}"
		},
		{
			"id": "4ace0873-5403-9f38-1463-3ac173577590",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{TEST_USER_ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\nvar res = JSON.parse(responseBody);\ntests[\"Error is present\"] = (typeof res.error[0].detail) === \"string\";\ntests[\"error is of type forbidden\"] = res.error[0].detail === \"forbidden\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455703806873,
			"name": "Delete User for cleanup copy",
			"description": "Deletes the specified user from the database.",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": []
		},
		{
			"id": "4e56d242-19e9-0ebf-b19c-65e4ff394553",
			"headers": "Content-Type: application/json\nAuthorization: Basic {{_OAUTH_CLIENT_HTTP_BASIC}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/oauth/token",
			"preRequestScript": "var env = {\n    PROTOCOL: \"http\",\n    HOST: \"127.0.0.1\",\n    ADMIN_USERNAME: \"admin@nanocloud.com\",\n    ADMIN_PASSWORD: \"admin\",\n    APP_KEY: \"9405fb6b0e59d2997e3c777a22d8f0e617a9f5b36b6565c7579e5be6deb8f7ae\",\n    APP_SECRET: \"9050d67c2be0943f2c63507052ddedb3ae34a30e39bbbbdab241c93f8b5cf341\"\n};\n\nfor (var key in env) {\n    var value = postman.getEnvironmentVariable(key);\n    if (typeof value === \"undefined\") {\n        postman.setEnvironmentVariable(key, env[key]);\n    }\n}\n\nvar appKey = postman.getEnvironmentVariable(\"APP_KEY\");\nvar appSecret = postman.getEnvironmentVariable(\"APP_SECRET\");\n\n/*\n * Use this technique instead of Basic auth to prevent basic base64 key\n * to be saved.\n */\npostman.setEnvironmentVariable(\"_OAUTH_CLIENT_HTTP_BASIC\", btoa(appKey + \":\" + appSecret))",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 401\"] = responseCode.code === 401;\n \nvar res = JSON.parse(responseBody);\ntests[\"error field is present\"] = typeof(res.error) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455618843235,
			"name": "Login with valid user but wrong password",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"rawModeData": "{\n    \"username\": \"{{TEST_USER_EMAIL}}\",\n    \"password\": \"inValidP4ssword2!\",\n    \"grant_type\": \"password\"\n}"
		},
		{
			"id": "52a83cb4-bb47-7f3a-6e6d-1b08263ab393",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/history",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865845714,
			"name": "List empty history entries",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"folder": "0b421e4b-c3bc-1cb9-1752-cdf51e192635"
		},
		{
			"id": "564af1ec-7325-8e6f-c7c8-498991020f17",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455887429394,
			"name": "Publish an invalid application",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\n        \"type\": \"application\",\n        \"attributes\": {\n            \"path\": \"C:/Windows/Systecoulala.exe\"\n        }\n    }\n}"
		},
		{
			"id": "5fd1f7ac-6576-c66e-ea60-c8a09204f817",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{TEST_USER_ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.data.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.data.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455878976016,
			"name": "Disable the user copy",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{     \n    \"data\" : {\n        \"id\": \"{{TEST_USER_ID}}\",\n        \"attributes\": {\n            \"activated\" : false\n        }\n    }\n}"
		},
		{
			"id": "72649593-d9d9-c332-2d01-1aef2aaf8a36",
			"headers": "Content-Type: application/json\nAuthorization: Basic {{_OAUTH_CLIENT_HTTP_BASIC}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/oauth/token",
			"preRequestScript": "var appKey = postman.getEnvironmentVariable(\"APP_KEY\");\nvar appSecret = postman.getEnvironmentVariable(\"APP_SECRET\");\n\n/*\n * Use this technique instead of Basic auth to prevent basic base64 key\n * to be saved.\n */\npostman.setEnvironmentVariable(\"_OAUTH_CLIENT_HTTP_BASIC\", btoa(appKey + \":\" + appSecret))",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response is not empty\"] = parseInt(responseHeaders['Content-Length'], 10) > 0\ntests[\"Response type is JSON\"] = responseHeaders['Content-Type'].split(\";\")[0] === \"application/json\"\n\nvar res = JSON.parse(responseBody);\ntests[\"Token type is \\\"Bearer\\\"\"] = res.type === \"Bearer\";\ntests[\"Token is present\"] = (typeof res.access_token) === \"string\";\n\n\n\npostman.setEnvironmentVariable(\"TEST_USER_ACCESS_TOKEN\", res.access_token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1454693893719,
			"name": "Login with a user",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"rawModeData": "{\n    \"username\": \"{{TEST_USER_EMAIL}}\",\n    \"password\": \"{{TEST_USER_PASSWORD}}\",\n    \"grant_type\": \"password\"\n}",
			"folder": "d065dfc2-deac-790d-b7a6-d76fb56a8203"
		},
		{
			"id": "75a18322-e82f-8b13-226f-7a59f4ee4251",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps/calc",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.data.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.data.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455888287234,
			"name": "Change app name",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{\n    \"data\" : {\n        \"type\": \"application\",\n        \"attributes\": {\n            \"display_name\": \"newcalc\"\n        }\n    }\n}"
		},
		{
			"id": "789f64f9-7d64-3d8d-8315-2ac2e9d594e5",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{TEST_USER_ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/iaas",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\nvar res = JSON.parse(responseBody);\ntests[\"Error is present\"] = (typeof res.error) === \"string\";\ntests[\"error is of type forbidden\"] = res.error === \"forbidden\";\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1454689597643,
			"name": "list running vms",
			"description": "Get OAuth token for admin user",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"folder": "d065dfc2-deac-790d-b7a6-d76fb56a8203"
		},
		{
			"id": "79bcacb4-f20c-6179-d75e-0202a41c86fe",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps/notepad",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.data.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.data.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455715109667,
			"name": "Unpublish invalid app",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "7a259674-b10e-56ff-d1de-b3bc221b83da",
			"headers": "Authorization: Bearer {{ACCESS_TOKEN}}\nContent-Type: application/json\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.data.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.data.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455556019319,
			"name": "Change Password",
			"description": "Changes the password of the specified user.",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\n        \"Password\": \"{{TEST_USER_NEWPASSWORD}}\"\n    }\n}"
		},
		{
			"id": "7acc81de-bd95-d229-6961-d04d54e1d7fc",
			"headers": "Content-Type: application/json\nAuthorization: Basic {{_OAUTH_CLIENT_HTTP_BASIC}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/oauth/token",
			"preRequestScript": "var appKey = postman.getEnvironmentVariable(\"APP_KEY\");\nvar appSecret = postman.getEnvironmentVariable(\"APP_SECRET\");\n\n/*\n * Use this technique instead of Basic auth to prevent basic base64 key\n * to be saved.\n */\npostman.setEnvironmentVariable(\"_OAUTH_CLIENT_HTTP_BASIC\", btoa(appKey + \":\" + appSecret))",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n \nvar res = JSON.parse(responseBody);\ntests[\"Token type is \\\"Bearer\\\"\"] = res.type === \"Bearer\";\ntests[\"Token is present\"] = (typeof res.access_token) === \"string\";\n\npostman.setEnvironmentVariable(\"ACCESS_TOKEN\", res.access_token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455618493057,
			"name": "Admin Login copy",
			"description": "Get OAuth token for admin user",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"rawModeData": "{\n    \"username\": \"{{ADMIN_USERNAME}}\",\n    \"password\": \"{{ADMIN_PASSWORD}}\",\n    \"grant_type\": \"password\"\n}"
		},
		{
			"id": "81892aa6-095b-160c-188d-63dd5b57cda9",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n \nvar res = JSON.parse(responseBody);\ntests[\"id is present\"] = (typeof res.data.id) === \"string\";\n\npostman.setEnvironmentVariable(\"TEST_USER_ID\", res.data.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455878175578,
			"name": "Add a valid User",
			"description": "Add a user to the database and contact possible other modules so they can add the user too.",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{     \n    \"data\" : {\n       \"type\": \"user\",\n       \"attributes\": {\n           \"first_name\": \"{{TEST_USER_FIRSTNAME}}\",\n           \"last_name\": \"{{TEST_USER_LASTNAME}}\",  \n           \"email\": \"{{TEST_USER_EMAIL}}\",\n           \"password\": \"{{TEST_USER_PASSWORD}}\"\n       }\n    }\n}"
		},
		{
			"id": "880b97bc-e903-c96d-eeec-059be91e320a",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/INVALIDUSER",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar res = JSON.parse(responseBody);\ntests[\"error field is present\"] = (typeof res.error[0].detail) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455802536562,
			"name": "Disable non-existing user",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{     \n    \"data\" : {\n        \"id\": \"INVALIDUSER\",\n        \"attributes\": {\n            \"activated\" : false\n        }\n    }\n}"
		},
		{
			"id": "8a58c042-6007-feaf-66d4-f8576142daae",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps/calc",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.data.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.data.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455894351738,
			"name": "Unpublish application",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "8c2f288a-6aa6-027b-be95-37873739ebc9",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/iaas",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Ico is present\"] = (typeof res[0].Ico) === \"string\";\ntests[\"Ico is windows\"] = res[0].Ico === \"windows\";\ntests[\"Name is present\"] = (typeof res[0].Name) === \"string\";\ntests[\"Name is windows\"] = res[0].Name === \"windows-custom-server-127.0.0.1-windows-server-std-2012R2-amd64\";\ntests[\"DisplayName is present\"] = (typeof res[0].DisplayName) === \"string\";\ntests[\"DisplayName is WinAD\"] = res[0].DisplayName === \"Windows Active Directory\";\ntests[\"Status is present\"] = (typeof res[0].Status) === \"string\";\n//tests[\"Status is available\"] = res[0].Status === \"available\";\ntests[\"Locked is present\"] = (typeof res[0].Locked) === \"boolean\";\ntests[\"Locked is false\"] = res[0].Locked === false;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1453472793644,
			"name": "list running vms, check windows is down",
			"description": "Get OAuth token for admin user",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"folder": "c6c91e8c-8a06-fafb-7705-72604b95ceaf"
		},
		{
			"id": "960ead55-336a-7737-31c7-33e54f4ad345",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n \nvar res = JSON.parse(responseBody);\ntests[\"id is present\"] = (typeof res.id) === \"undefined\";\ntests[\"email is present\"] = (typeof res.email) === \"undefined\";\ntests[\"activated is present\"] = (typeof res.activated) === \"undefined\";\ntests[\"is_admin is present\"] = (typeof res.is_admin) === \"undefined\";\ntests[\"first_name is present\"] = (typeof res.first_name) === \"undefined\";\ntests[\"last_name is present\"] = (typeof res.last_name) === \"undefined\";\ntests[\"sam is present\"] = (typeof res.sam) === \"undefined\";\ntests[\"windowsPassword is present\"] = (typeof res.windows_password) === \"undefined\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455715967171,
			"name": "Get User Infos of deleted user",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": []
		},
		{
			"id": "98d950c4-04a9-673f-845f-e59eb0b35ade",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps/notepad",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.data.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.data.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455716161314,
			"name": "Unpublish an invalid app",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "a19c7ad5-1ac9-dd60-0f6c-4ae69fe0153f",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps/me",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452867143837,
			"name": "List empty apps list for sam",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"folder": "42a97f8a-7ba2-91e9-b2ef-bc0895783146"
		},
		{
			"id": "a3e149b4-6469-af64-33ce-3860f91caa58",
			"headers": "Authorization: Bearer {{ACCESS_TOKEN}}\nContent-Type: application/json\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/history",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.data.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.data.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455629449730,
			"name": "Add a valid history entry",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{\n    \"data\": {\n        \"user_id\": \"{{TEST_USER_ID}}\",\n        \"connection_id\": \"testConnectionId\",\n        \"start_date\": \"monday\",\n        \"end_date\": \"tuesday\"\n    }\n}"
		},
		{
			"id": "a5a6f5bd-52c8-13ef-4d7d-07ff6ae8337e",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/iaas",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Ico is present\"] = (typeof res.data[0].attributes.ico) === \"string\";\ntests[\"Ico is windows\"] = res.data[0].attributes.ico === \"windows\";\ntests[\"Name is present\"] = (typeof res.data[0].id) === \"string\";\ntests[\"Name is windows\"] = res.data[0].id === \"windows-custom-server-127.0.0.1-windows-server-std-2012R2-amd64\";\ntests[\"DisplayName is present\"] = (typeof res.data[0].attributes.display_name) === \"string\";\ntests[\"DisplayName is WinAD\"] = res.data[0].attributes.display_name === \"Windows Active Directory\";\ntests[\"Status is present\"] = (typeof res.data[0].attributes.status) === \"string\";\ntests[\"Status is running\"] = res.data[0].attributes.status === \"running\";\ntests[\"Locked is present\"] = (typeof res.data[0].attributes.locked) === \"boolean\";\ntests[\"Locked is false\"] = res.data[0].attributes.locked === false;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1456138764936,
			"name": "list running vms",
			"description": "Get OAuth token for admin user",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": []
		},
		{
			"id": "a70f63e0-29d1-8ae3-ffdd-76c776afe2ad",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{TEST_USER_ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps/calc",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\nvar res = JSON.parse(responseBody);\ntests[\"Error is present\"] = (typeof res.error[0].detail) === \"string\";\ntests[\"error is of type forbidden\"] = res.error[0].detail === \"forbidden\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455878997824,
			"name": "Unpublish application copy",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "b3985575-5baa-8dc0-adbc-7e9520360fa2",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{TEST_USER_ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\nvar res = JSON.parse(responseBody);\ntests[\"Error is present\"] = (typeof res.error[0].detail) === \"string\";\ntests[\"error is of type forbidden\"] = res.error[0].detail === \"forbidden\";\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455878994745,
			"name": "Lists all apps copy",
			"description": "Get OAuth token for admin user",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": []
		},
		{
			"id": "b3e58125-aa2d-b674-9b0d-9163de001196",
			"headers": "Authorization: Bearer {{ACCESS_TOKEN}}\nContent-Type: application/json\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/history",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar res = JSON.parse(responseBody);\ntests[\"error field is present\"] = (typeof res.error[0].detail) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455629444891,
			"name": "Add an invalid history",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{\n\n}"
		},
		{
			"id": "b7572cd7-54ce-680c-d47c-0c51880cdaf4",
			"headers": "",
			"url": "{{PROTOCOL}}://{{HOST}}/",
			"preRequestScript": "function initEnv() {\n    var env = {\n        PROTOCOL: \"https\",\n        HOST: \"127.0.0.1\",\n        ADMIN_USERNAME: \"admin@nanocloud.com\",\n        ADMIN_PASSWORD: \"admin\",\n        APP_KEY: \"9405fb6b0e59d2997e3c777a22d8f0e617a9f5b36b6565c7579e5be6deb8f7ae\",\n        APP_SECRET: \"9050d67c2be0943f2c63507052ddedb3ae34a30e39bbbbdab241c93f8b5cf341\",\n        TEST_USER_FIRSTNAME: \"karl\",\n        TEST_USER_LASTNAME: \"kool\",\n        TEST_USER_PASSWORD: \"Nano123+\",\n        TEST_USER_NEW_PASSWORD: \"Juju123+\",\n        TEST_USER_EMAIL: \"karkool@mail.com\",\n    };\n    \n    for (var key in env) {\n        var value = postman.getEnvironmentVariable(key);\n        if (typeof value === \"undefined\") {\n            postman.setEnvironmentVariable(key, env[key]);\n        }\n    }\n}\n\ninitEnv();\n\nfunction init() {\n    var checkUnderscoreCase = function(obj) {\n        for (var key in obj) {\n            if (!/^[a-z_]*$/.test(key)) {\n                return false;\n            }\n            \n            if (typeof obj[key] === \"object\") {\n                if (!checkUnderscoreCase(obj[key])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    \n   \n   \n    if (tests[\"Reponse Content-Type is present\"] = !!postman.getResponseHeader('Content-Type')) {\n        tests[\"Content-Type type is JSON\"] = postman.getResponseHeader('Content-Type').split(\";\")[0] === \"application/json\";\n    } else {\n        tests[\"Content-Type type is JSON\"] = false;\n    }\n    \n    if (tests[\"Reponse Content-Length is present\"] = !!postman.getResponseHeader('Content-Length')) {\n        tests[\"Response is not empty\"] = parseInt(responseHeaders['Content-Length'], 10) > 0;\n    } else {\n        tests[\"Response is not empty\"] = false;\n    }\n    \n    var res;\n    \n   try {\n        res = JSON.parse(responseBody);\n        tests[\"JSON is valid\"] = true;\n    } catch (err) {\n        tests[\"JSON is valid\"] = false;\n    }\n    tests[\"Response is a JSON object\"] = (typeof res === \"object\" && res !== null);\n    \n    //if (tests[\"Response is a JSON object\"] = (typeof res === \"object\")) {\n    //    tests[\"JSON notation is underscore case\"] = checkUnderscoreCase(res);\n    //}\n    \n    // return false is any of the tests failed\n    return _.values(tests).indexOf(false) === -1;\n}\n\npostman.setEnvironmentVariable(\"__init__\", init.toString());",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"API is reachable\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865455654,
			"name": "Init  copy",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"isFromCollection": true,
			"folder": "c3e8350b-369a-3596-8247-8da92fa79c56"
		},
		{
			"id": "bce0f9a7-e94f-b29c-db33-cfd673d8f8cb",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"email of admin if present\"] = (typeof res.data[0].attributes.email) === \"string\";\ntests[\"email of admin has the right value\"] = res.data[0].attributes.email === postman.getEnvironmentVariable(\"ADMIN_USERNAME\");\ntests[\"activated field of admin if present\"] = (typeof res.data[0].attributes.activated) === \"boolean\";\ntests[\"admin is activated\"] = res.data[0].attributes.activated === true;\ntests[\"is_admin field of admin if present\"] = (typeof res.data[0].attributes.is_admin) === \"boolean\";\ntests[\"admin is really the admin\"] = res.data[0].attributes.is_admin === true;\ntests[\"id of previsoulsy created user is present\"] = (typeof res.data[1].id) === \"string\";\ntests[\"email of previsoulsy created user is present\"] = (typeof res.data[1].attributes.email) === \"string\";\ntests[\"email of previsoulsy created user has the right value\"] = res.data[1].attributes.email === postman.getEnvironmentVariable(\"TEST_USER_EMAIL\");\ntests[\"activated of previsoulsy created user is present\"] = (typeof res.data[1].attributes.activated) === \"boolean\";\ntests[\"activated of previsoulsy created user has the right value\"] = res.data[1].attributes.activated === true;\ntests[\"is_admin of previsoulsy created user is present\"] = (typeof res.data[1].attributes.is_admin) === \"boolean\";\ntests[\"is_admin of previsoulsy created user has the right value\"] = res.data[1].attributes.is_admin === false;\ntests[\"first_name of previsoulsy created user is present\"] = (typeof res.data[1].attributes.first_name) === \"string\";\ntests[\"first_name of previsoulsy created user has the right value\"] = res.data[1].attributes.first_name === postman.getEnvironmentVariable(\"TEST_USER_FIRSTNAME\");\ntests[\"last_name of previsoulsy created user is present\"] = (typeof res.data[1].attributes.last_name) === \"string\";\ntests[\"last_name of previsoulsy created user has the right value\"] = res.data[1].attributes.last_name === postman.getEnvironmentVariable(\"TEST_USER_LASTNAME\");\ntests[\"sam of previsoulsy created user is present\"] = (typeof res.data[1].attributes.sam) === \"string\";\ntests[\"windows_password of previsoulsy created user is present\"] = (typeof res.data[1].attributes.windows_password) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455812938080,
			"name": "List Users",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": []
		},
		{
			"id": "ca8fe539-d765-0a76-c923-bf8bb23dd8e8",
			"headers": "Content-Tyoe: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/history",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"user_id is present\"] = (typeof res.data[0].user_id) === \"string\";\ntests[\"user_id has the correct value\"] = res.data[0].user_id === postman.getEnvironmentVariable(\"TEST_USER_ID\");\ntests[\"connection_id is present\"] = (typeof res.data[0].connection_id) === \"string\";\ntests[\"connection_id has the correct value\"] = res.data[0].connection_id === \"testConnectionId\";\ntests[\"start_date is present\"] = (typeof res.data[0].start_date) === \"string\";\ntests[\"start_date has the correct value\"] = res.data[0].start_date === \"monday\";\ntests[\"end_date is present\"] = (typeof res.data[0].end_date) === \"string\";\ntests[\"end_date has the correct value\"] = res.data[0].end_date === \"tuesday\";\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455716019940,
			"name": "List history entries",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": []
		},
		{
			"id": "d51e7488-42a8-3d0d-331e-d082daba8544",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps/calc",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar res = JSON.parse(responseBody);\ntests[\"error field is present\"] = (typeof res.error[0].detail) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455888296828,
			"name": "Change app name with invalid one",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{\n    \"data\" : {\n        \"type\": \"application\",\n        \"attributes\": {\n            \"display_name\": \"\"\n        }\n    }\n}"
		},
		{
			"id": "de94cb56-85c6-dfd2-6ea5-8342ab369619",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n \nvar res = JSON.parse(responseBody);\ntests[\"id is present\"] = (typeof res.data.id) === \"string\";\n\npostman.setEnvironmentVariable(\"TEST_USER_ID\", res.data.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455878884154,
			"name": "Add a valid User copy",
			"description": "Add a user to the database and contact possible other modules so they can add the user too.",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{     \n    \"data\" : {\n       \"type\": \"user\",\n       \"attributes\": {\n           \"first_name\": \"{{TEST_USER_FIRSTNAME}}\",\n           \"last_name\": \"{{TEST_USER_LASTNAME}}\",  \n           \"email\": \"{{TEST_USER_EMAIL}}\",\n           \"password\": \"{{TEST_USER_PASSWORD}}\" \n       }\n    }\n}"
		},
		{
			"id": "e2c96a02-e26e-2ad2-3eeb-eb949483c579",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.data.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.data.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455878032500,
			"name": "Delete User for cleanup",
			"description": "Deletes the specified user from the database.",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": []
		},
		{
			"id": "ee572235-a0bc-f703-131e-9a0623db9a10",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n \nvar res = JSON.parse(responseBody);\ntests[\"id is present\"] = (typeof res.data.id) === \"string\";\n\npostman.setEnvironmentVariable(\"TEST_USER_ID\", res.data.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455715761132,
			"name": "Add a valid User copy",
			"description": "Add a user to the database and contact possible other modules so they can add the user too.",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"folder": "d065dfc2-deac-790d-b7a6-d76fb56a8203",
			"isFromCollection": true,
			"collectionRequestId": "ee572235-a0bc-f703-131e-9a0623db9a10",
			"rawModeData": "{     \n    \"data\" : {\n       \"first_name\": \"{{TEST_USER_FIRSTNAME}}\",\n       \"last_name\": \"{{TEST_USER_LASTNAME}}\",  \n       \"email\": \"{{TEST_USER_EMAIL}}\",\n       \"password\": \"{{TEST_USER_PASSWORD}}\" \n    }\n}"
		},
		{
			"id": "f71d13dd-2eed-57b6-29ea-79e4bde9d1a6",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 400\"] = responseCode.code === 400;\n \nvar res = JSON.parse(responseBody);\ntests[\"error is present\"] = (typeof res.error[0].detail) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455878159273,
			"name": "Add a invalid User",
			"description": "Add a invalid User to see if the server respond width a bad request http status code.",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{     \n    \"data\" : {\n       \"type\": \"user\",\n       \"attributes\": {\n           \"first_name\": \"{{TEST_USER_FIRSTNAME}}\",\n           \"last_name\": \"{{TEST_USER_LASTNAME}}\",  \n           \"password\": \"{{TEST_USER_PASSWORD}}\"\n       }\n    }\n}"
		},
		{
			"id": "f7804920-d56e-7494-98b4-0c9c5774f81e",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps/me",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"id is present\"] = (typeof res.data[0].id) === \"number\";\ntests[\"collection name is present\"] = (typeof res.data[0].attributes.collection_name) === \"string\";\ntests[\"collection name is 'collection'\"] = res.data[0].attributes.collection_name === \"collection\";\ntests[\"alias is present\"] = (typeof res.data[0].attributes.alias) === \"string\";\ntests[\"alias is 'calc'\"] = res.data[0].attributes.alias === \"calc\";\ntests[\"display Name is present\"] = (typeof res.data[0].attributes.display_name) === \"string\";\ntests[\"display Name is 'calc'\"] = res.data[0].attributes.display_name === \"calc\";\ntests[\"filepath is present\"] = (typeof res.data[0].attributes.file_path) === \"string\";\ntests[\"filepath1 has the correct value\"] = res.data[0].attributes.file_path === \"C:\\\\Windows\\\\System32\\\\calc.exe\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455894282604,
			"name": "List apps for sam",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": []
		},
		{
			"id": "fc4d5bfe-d7bf-c1ca-21bd-ab54f0fb4e98",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{TEST_USER_ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 403\"] = responseCode.code === 403;\n\nvar res = JSON.parse(responseBody);\ntests[\"Error is present\"] = (typeof res.error[0].detail) === \"string\";\ntests[\"error is of type forbidden\"] = res.error[0].detail === \"forbidden\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455878906098,
			"name": "Get User Infos copy",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": []
		},
		{
			"id": "fcfb6351-c6cc-b491-d2ff-12082f13b9ed",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.data.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.data.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455802485875,
			"name": "Disable the user",
			"description": "",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{     \n    \"data\" : {\n        \"id\": \"{{TEST_USER_ID}}\",\n        \"attributes\": {\n            \"activated\" : false\n        }\n    }\n}"
		},
		{
			"id": "fe045879-d3db-bcda-418b-e87cb9b9f1d8",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 409\"] = responseCode.code === 409;\n \nvar res = JSON.parse(responseBody);\ntests[\"Error is returned\"] = (typeof res.error[0].detail) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1455878810529,
			"name": "Add the same user again",
			"description": "Add a user to the database and contact possible other modules so they can add the user too.",
			"collectionId": "b01cca43-bf38-08e7-2042-339c72ba27ba",
			"responses": [],
			"rawModeData": "{\n    \"data\" : {\n       \"type\": \"user\",\n       \"attributes\": {\n           \"first_name\": \"{{TEST_USER_FIRSTNAME}}\",\n           \"last_name\": \"{{TEST_USER_LASTNAME}}\",  \n           \"email\": \"{{TEST_USER_EMAIL}}\",\n           \"password\": \"{{TEST_USER_PASSWORD}}\"\n       }\n    }\n}"
		}
	]
}